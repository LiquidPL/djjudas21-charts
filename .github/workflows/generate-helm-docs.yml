name: Generate Helm docs
on: # rebuild any PRs and main branch changes
  pull_request:
    branches:
      - '*'
# Remove all permissions by default
permissions: {}
#Â Avoid concurrency over the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
jobs:
  get-chart:
    runs-on: ubuntu-latest
    name: Get modified charts
    permissions:
      pull-requests: read
    outputs:
      chart: ${{ steps.get-chart.outputs.chart }}
      result: ${{ steps.get-chart.outputs.result }}
      values-updated: ${{ steps.get-chart.outputs.values-updated }}
    steps:
      - id: get-chart
        name: Get modified charts
        env:
          PULL_REQUEST_NUMBER: "${{ github.event.pull_request.number }}"
          PULL_REQUEST_URL: "${{ github.event.pull_request.url }}"
          GITHUB_TOKEN: "${{ github.token }}"
        run: |
          # Using the Github API to detect the files changed as git merge-base stops working when the branch is behind
          files_changed_data="$(gh api --paginate /repos/${GITHUB_REPOSITORY}/pulls/${PULL_REQUEST_NUMBER}/files)"
          files_changed="$(echo "$files_changed_data" | jq -r '.[] | .filename')"
          # Adding || true to avoid "Process exited with code 1" errors
          charts_dirs_changed="$(echo "$files_changed" | xargs dirname | grep -o "charts/[^/]*" | sort | uniq || true)"
          # Using grep -c as a better alternative to wc -l when dealing with empty strings."
          num_charts_changed="$(echo "$charts_dirs_changed" | grep -c "charts" || true)"
          num_version_bumps="$(echo "$files_changed_data" | jq -r '[.[] | select(.filename|endswith("Chart.yaml")) | select(.patch|contains("+version")) ] | length' )"
          non_readme_files=$(echo "$files_changed" | grep -vc "\.md" || true)

          if [[ $(curl -Lks "${PULL_REQUEST_URL}" | jq '.state | index("closed")') != *null* ]]; then
            # The PR for which this workflow run was launched is now closed -> SKIP
            echo "error=The PR for which this workflow run was launched is now closed. The tests will be skipped." >> $GITHUB_OUTPUT
            echo "result=skip" >> $GITHUB_OUTPUT
          elif [[ "$non_readme_files" -le "0" ]]; then
            # The only changes are .md files -> SKIP
            echo "result=skip" >> $GITHUB_OUTPUT
          elif [[ "$num_charts_changed" -ne "$num_version_bumps" ]]; then
            # Changes done in charts but version not bumped -> ERROR
            echo "error=Detected changes in charts without version bump in Chart.yaml. Charts changed: ${num_charts_changed}. Version bumps detected: ${num_version_bumps}" >> $GITHUB_OUTPUT
            echo "result=fail" >> $GITHUB_OUTPUT
          elif [[ "$num_charts_changed" -eq "1" ]]; then
            # Changes done in only one chart -> OK
            echo "result=ok" >> $GITHUB_OUTPUT
            # Extra output: chart name
            chart_name=$(echo "$charts_dirs_changed" | sed "s|charts/||g")
            echo "chart=${chart_name}" >> $GITHUB_OUTPUT
            # Extra output: values-updated
            if [[ ${files_changed[@]} =~ "charts/${chart_name}/values.yaml" ]]; then
              echo "values-updated=true" >> $GITHUB_OUTPUT
            fi
          elif [[ "$num_charts_changed" -le "0" ]]; then
            # Changes done in the charts/ folder but not inside a chart subfolder -> SKIP
            echo "error=No changes detected in charts. The rest of the tests will be skipped." >> $GITHUB_OUTPUT
            echo "result=skip" >> $GITHUB_OUTPUT
          else
            # Changes done in more than chart -> SKIP
            echo "error=Changes detected in more than one chart directory. It is strongly advised to change only one chart in a PR. The rest of the tests will be skipped." >> $GITHUB_OUTPUT
            echo "result=skip" >> $GITHUB_OUTPUT
          fi
      # Using actions/github-scripts because using exit 1 in the script above would not provide any output
      # Source: https://github.community/t/no-output-on-process-completed-with-exit-code-1/123821/3
      - id: show-error
        name: Show error
        if: ${{ steps.get-chart.outputs.result != 'ok' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            let message='${{ steps.get-chart.outputs.error }}';
            if ('${{ steps.get-chart.outputs.result }}' === 'fail' ) {
              core.setFailed(message);
            } else {
              core.warning(message);
            }
  update-pr:
    runs-on: ubuntu-latest
    needs: [get-chart]
    name: Automatically update README and CRDs
    permissions:
      contents: write
    outputs:
      result: ${{ steps.update-pr.outputs.result }}
    if: needs.get-chart.outputs.result == 'ok'
    steps:
      - name: Checkout charts repo
        uses: actions/checkout@4
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      - name: Install readme-generator-for-helm
        if: needs.get-chart.outputs.values-updated == 'true'
        run: npm install -g @bitnami/readme-generator-for-helm
      - id: update-readme
        name: 'Update README'
        if: needs.get-chart.outputs.values-updated == 'true'
        env:
          CHART: ${{ needs.get-chart.outputs.chart }}
        run: |
            exit_code=0
            echo "Validating README.md for ${CHART}"
            # Validating *.registry parameters
            while read line; do
              echo "$line" | grep --quiet "\[default: \(REGISTRY_NAME\|\"\"\)\]" || exit_code=$?
            done < <(grep "@param\s\+[A-Za-z\.]\+\.registry\s\+" "charts/${CHART}/values.yaml")
            if [[ $exit_code -ne 0 ]]; then
              echo "error=Please ensure all *.registry params include the [default: REGISTRY_NAME] modifier in the chart charts/${CHART}/values.yaml file"
              exit "$exit_code"
            fi
            # Validating *.repository parameters
            while read line; do
              param=$(echo "$line" | awk '{print $3}')
              # Checking if it's a image's registry-related param
              registry_param=$(echo ${param} | sed 's/\.repository/\.registry/g')
              grep --quiet "@param\s\+${registry_param}" "charts/${CHART}/values.yaml" && ( echo "$line" | grep --quiet "\[default: \(REPOSITORY_NAME/.*\|\"\"\)\]" || exit_code=$? )
            done < <(grep "@param\s\+[A-Za-z\.]\+\.repository\s\+" "charts/${CHART}/values.yaml")
            if [[ $exit_code -ne 0 ]]; then
              echo "error=Please ensure all *.repository params include the [default: REPOSITORY_NAME] modifier the in the chart charts/${CHART}/values.yaml file"
              exit "$exit_code"
            fi
            # Validating *.tag parameters
            ! grep --quiet "@param\s\+[A-Za-z\.]\+\.tag\s\+" "charts/${CHART}/values.yaml" || exit_code=$?
            if [[ $exit_code -ne 0 ]]; then
              echo "error=Please ensure all *.tag params are skipped (@skip) in the charts/${CHART}/values.yaml file"
              exit "$exit_code"
            fi
            echo "Updating README.md for ${CHART}"
            readme-generator --values "charts/${CHART}/values.yaml" --readme "charts/${CHART}/README.md" --schema "/tmp/schema.json"
            # Commit all changes, if any
            if git status -s | grep "charts/${CHART}"; then
              git add "charts/${CHART}" && git commit -m "Update README.md with readme-generator-for-helm" --signoff
            fi
      - id: update-pr
        name: Push changes
        run: |
          # Push all the new commits, if any
          if [[ $(git cherry -v) ]]; then
            git push
            echo "result=ok" >> $GITHUB_OUTPUT
          else
            echo "result=skip" >> $GITHUB_OUTPUT
          fi
